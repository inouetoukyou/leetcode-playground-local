//
// Created by Minghang Yang on 2019-07-21.
//
#pragma once

#include "listnode.h"
#include "../tools/stringtool"
namespace ymh{
template <class T>
const OJ_TYPE GenericListNode<T>::LEETCODE = 0;

template <class T>
const OJ_TYPE GenericListNode<T>::LINTCODE = 1;

#ifdef OJ_LISTNODE_CIRCLE
template <class T>
GenericListNode<T>::GenericListNode() : circle(false), next(nullptr){}

template <class T>
GenericListNode<T>::GenericListNode(T val) : val(val), circle(false), next(nullptr){}
#else
template <class T>
GenericListNode<T>::GenericListNode() : next(nullptr){}

template <class T>
GenericListNode<T>::GenericListNode(T val) : val(val), next(nullptr){}
#endif

template <class T>
GenericListNode<T>* GenericListNode<T>::stringToListNode(std::string &input, OJ_TYPE type, char delim) {
    trimLeftTrailingSpaces(input);
    trimRightTrailingSpaces(input);
    if (type == LEETCODE) {
        std::string input1 = input.substr(1, input.length() - 2);
        if (input1.empty()) {
            return nullptr;
        }
        std::string item;
        std::stringstream ss(input1);
        GenericListNode dummy(0);
        GenericListNode *tail = &dummy;
        while (true) {
            if (!getline(ss, item, delim)) {
                break;
            }
            if (delim == ' ' && item == "") {
                continue;
            }
            GenericListNode *node = new GenericListNode(stringToValue<T>(item));
            tail->next = node;
            tail = tail->next;
        }
        return dummy.next;
    }
    std::string input1 = input;
    if (input1.empty()) {
        return nullptr;
    }
    std::string item;
    std::stringstream ss(input1);
    GenericListNode dummy = GenericListNode();
    GenericListNode *tail = &dummy;
    while (true) {
        if (!getline(ss, item, delim)) {
            break;
        }
        if (delim == ' ' && item == "") {
            continue;
        }
        if (item.find("null") != std::string::npos) {
            break;
        }
        if (!isdigit(item[item.size() - 1])) {
            // item[item.size() - 1] == '-'
            item = item.substr(0, item.size() - 1);
        }
        GenericListNode *node = new GenericListNode(stringToValue<T>(item));
        tail->next = node;
        tail = tail->next;
    }
    return dummy.next;
}

template <class T>
std::vector<T> GenericListNode<T>::traverse(GenericListNode<T> *head) {
    std::vector<T> ans;
    GenericListNode *p = head;
    while (p) {
        ans.push_back(p->val);
        p = p->next;
    }
    return ans;
}
template <class T>
void GenericListNode<T>::deleteList(GenericListNode<T> *head) {
    while (head != nullptr) {
        GenericListNode *next = head->next;
        delete(head);
        head = next;
    }
}

#ifdef OJ_LISTNODE_CIRCLE
template <class T>
GenericListNode<T>* GenericListNode<T>::setCircle(GenericListNode<T> *head) {
    if (head == nullptr || head->circle) {
        return head;
    }
    GenericListNode* p = head;
    while (p && p->next != nullptr) {
        p->circle = true;
        p = p->next;
    }
    p->next = head;
    p->circle = true;
    return head;
}

template <class T>
bool GenericListNode<T>::isCircle() {
    return this->circle;
}
#endif
}